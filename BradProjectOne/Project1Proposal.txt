BradProjectOne


Requirements
The application should be a C# Console Application - DONE
The application should build and run - DONE
The application should interact with users, and provide some console UI - DONE
The application should allow for multiple users to log in and persist their data - DONE
The application should demonstrate good input validation - DONE
The application should persist data to a SQL Server DB - DONE
The application should communicate to DB via ADO.NET or Entity Framework Core


Nice to Have
n-tier architecture
dependency injection
The application should log errors and system events to a file or a DB table
Basic user authentication and authorization (admins vs normal users with passwords)
The application should have unit tests

Blood Pressure Tracker

What I want to do:

-Start with a menu like this(Data validation to only enter number selection) - mainMenu
	-1 New user?
	-2 Returning user?
	-3 Exit
Handling the user option that was selected from mainMenu
	-1 prompt for name and generate a userId(possibly using GUID) - continue to userMenu
	-2 prompt for name to search DB - continue to next menu
	-3 ends app

-User Menu(userMenu) - immediately if returning user selection is 2 or after userName and userId are established for new user(1)--(Data validation to only enter number selection)
	-1 Enter new reading
	-2 View all previous entries
	-3 Delete a previous entry with date
	-4 Exit
		-1 Collect/prompt user for entry of reading (will store to DB) - questions one by one
		-Once entered return to 'userMenu'
		-2 will display all prior stored entries including the date and numbers(pulled from DB) in single view on separate lines - bloodPressureMenu / bloodPressureController / blood PressureRecordRepository
		-return to userMenu - by hitting enter maybe?
		-3 will give the option to delete an entry--By date only to start with(date will be unique as will only allow 1 entry for each day for day 1)
		-4 will end app



Models(what we are trying to work with and store)--create separate folders to store all models .CS files by topic
	-userProfile
		-userId (GUID) // userId will be primary key of this table
		-userName (string)
		
	-bloodPressureRecord
		-userId (GUID) - same user ID can have multiple readings //foreign key references the primary key(which is in userProfile)
		-readingId (GUID) //primary key for this table
		-systolicNumber (int)
		-diastolicNumber (int)
		-pulse (int)
		-dateChecked (string or something better) //should be unique


Separate folders for presentation layer(menus in this case), data access layer(storing of data in the database) and controllers(any specific business logic, etc. needed)

Presentation Directory
	-mainMenu
		-startMenu
	-userMenu
		-returningUserMenu
	-bloodPressureMenu
		-TBD

Controllers Directory
	-userProfileController
		-createUser
		-getReturningUser
	-bloodPressureController
		-createReading
		-retrieveReadings
		-deleteReading

Data Access Directory
	-userRepository
		-createUser
		-retrieveUser
	-bloodPressureRecordRepository
		-createBloodPressureRecord
		-retrieveBloodPressureRecord
		-deleteBloodPressureRecord



Day 2 to nice to haves

-another option from userMenu to display average readings, and also high and low readings (with date)
-generate a user-friendly userId and switch the login to userId and readingId(something like 1, 2, 3, 4, etc. like a policy number in our world)
-Messaging when your reading is way to high or low
-Allow multiple entries for same date(dateChecked)
